/*
    Copyright (C) 2020 Accurics, Inc.

	Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

		http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

package vulnerability

import (
	"reflect"
	"strings"
	"testing"

	"github.com/accurics/terrascan/pkg/iac-providers/output"
	"github.com/accurics/terrascan/pkg/results"
)

func TestPrepareVulnerabilityObject(t *testing.T) {
	options := make(map[string]interface{})
	type args struct {
		container output.ContainerNameAndImage
		resource  output.ResourceConfig
	}
	tests := []struct {
		name string
		args args
		want []*results.Vulnerability
	}{
		{name: "output with 1 result",
			args: args{
				container: output.ContainerNameAndImage{
					Name:  "test",
					Image: "test",
					Vulnerabilities: []output.Vulnerability{
						{Severity: "low"},
					},
				},
				resource: output.ResourceConfig{
					Line:   2,
					Type:   "test",
					Source: "test",
					Name:   "test",
				},
			},
			want: []*results.Vulnerability{
				{
					Image:        "test",
					Container:    "test",
					Severity:     strings.ToUpper("low"),
					File:         "test",
					LineNumber:   2,
					ResourceType: "test",
					ResourceName: "test",
				},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := prepareVulnerabilityObject(tt.args.container, tt.args.resource, options); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("prepareVulnerabilityObject() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestGetVulnerabilitiesByRepository(t *testing.T) {
	options := make(map[string]interface{})
	type args struct {
		container output.ContainerNameAndImage
	}
	tests := []struct {
		name string
		args args
		want []output.Vulnerability
	}{
		{
			name: "no registered registries",
			args: args{
				container: output.ContainerNameAndImage{
					Image: "test",
				},
			},
			want: []output.Vulnerability{},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := getVulnerabilitiesByRepository(tt.args.container, options); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("getVulnerabilitiesByRepository() = %v, want %v", got, tt.want)
			}
		})
	}
}
