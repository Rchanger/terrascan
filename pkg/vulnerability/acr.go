/*
    Copyright (C) 2020 Accurics, Inc.

	Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

		http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

package vulnerability

import (
	"context"
	"encoding/json"
	"fmt"
	"os"
	"strings"

	"github.com/Azure/azure-sdk-for-go/profiles/preview/preview/containerregistry/runtime/containerregistry"
	"github.com/Azure/azure-sdk-for-go/services/resourcegraph/mgmt/2021-03-01/resourcegraph"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/autorest/azure/auth"
	"github.com/accurics/terrascan/pkg/iac-providers/output"
	"go.uber.org/zap"
)

const (
	azureURL              = ".azurecr.io"
	azureRegistryPassword = "AZURE_ACR_PASSWORD"
)

//ACR  acr container registry
type ACR struct{}

func init() {
	RegisterContainerRegistry("acr", &ACR{})
}

//CheckRegistry verify provided image belongs to acr registry
func (a *ACR) checkRegistry(image string) bool {
	domain := GetDomain(image)
	return strings.HasSuffix(domain, azureURL)
}

// GetVulnerabilities - get vulnerabilities from acr registry
func (a *ACR) getVulnerabilities(container output.ContainerNameAndImage, options map[string]interface{}) (vulnerabilities []output.Vulnerability) {
	results, err := a.ScanImage(container.Image)
	if err != nil {
		zap.S().Errorf("error finding vulnerabilities for image %s : %v", container.Image, err)
		return
	}
	for _, result := range results {
		vulnerability := output.Vulnerability{}
		vulnerability.PrepareFromACRImageScan(result)
		if vulnerability.VulnerabilityID != "" {
			vulnerabilities = append(vulnerabilities, vulnerability)
		}
	}
	return
}

//ScanImage - get the image scan result from ACR registry
func (a *ACR) ScanImage(image string) ([]output.ACRResponse, error) {
	results := []output.ACRResponse{}
	resourcegraphClient := resourcegraph.New()

	authrizer, err := auth.NewAuthorizerFromFile(azure.PublicCloud.ResourceManagerEndpoint)
	if err != nil {
		zap.S().Errorf("failed to authorize for image %s ", image)
		return results, err
	}
	resourcegraphClient.Authorizer = authrizer

	imageDetails, isValidImage := getACRImageDetails(image, authrizer)
	if !isValidImage {
		zap.S().Errorf(invalidImageReferenceMsg, image)
		return nil, fmt.Errorf(invalidImageReferenceMsg, image)
	}

	RequestOptions := resourcegraph.QueryRequestOptions{
		ResultFormat: resourcegraph.ResultFormatObjectArray,
	}

	query := `securityresources | where type == "microsoft.security/assessments"
	| summarize by assessmentKey=name 
	| join kind=inner (
		securityresources
		 | where type == "microsoft.security/assessments/subassessments"
		 | extend assessmentKey = extract(".*assessments/(.+?)/.*",1,  id)
	 ) on assessmentKey
	| project parse_json(properties)
	| where properties.additionalData.repositoryName =="` + imageDetails.Repository +
		`" and properties.additionalData.registryHost == "` + imageDetails.Registry +
		`" and properties.additionalData.imageDigest == "` + imageDetails.Digest + `"`

	request := resourcegraph.QueryRequest{
		Query:   &query,
		Options: &RequestOptions,
	}

	// Run the query and get the results
	var response, queryErr = resourcegraphClient.Resources(context.Background(), request)
	if queryErr != nil {
		zap.S().Errorf(errorScanningMsg, image, queryErr)
		return results, queryErr
	}

	jsonData, err := json.Marshal(response.Data)
	if err != nil {
		zap.S().Errorf("error marshaling image %s scan results", image)
		return results, err
	}
	err = json.Unmarshal([]byte(jsonData), &results)
	if err != nil {
		zap.S().Errorf("error unmarshaling image %s scan results", image)
		return results, err
	}
	return results, nil
}

// getImageNameHostDigest - gets image tag, host and digest from iamge name
func getACRImageDetails(image string, authrizer autorest.Authorizer) (imageDetails ImageDetails, validImage bool) {
	validImage = true
	imageDetails = GetImageDetails(image, imageDetails)
	if imageDetails.Tag == "" && imageDetails.Repository == "" {
		validImage = false
	}
	if imageDetails.Tag == "" {
		imageDetails.Tag = defaultTagValue
	}
	if imageDetails.Digest == "" {
		loginURL := fmt.Sprintf("https://%s", imageDetails.Registry)
		digest := getImageDigestFromTag(image, imageDetails, loginURL)
		if digest == "" {
			validImage = false
			return
		}
		imageDetails.Digest = digest
	}
	return

}

// getImageDigestFromTag - get image digest from repository for given tag
func getImageDigestFromTag(image string, imageDetails ImageDetails, loginURL string) (digest string) {
	password := os.Getenv(azureRegistryPassword)
	parts := strings.Split(imageDetails.Registry, azureURL)
	if len(parts) < 2 {
		return
	}
	basicAuthorizer := autorest.NewBasicAuthorizer(parts[0], password)
	client := containerregistry.NewTagClient(loginURL)
	client.Authorizer = basicAuthorizer
	result, err := client.GetAttributes(context.Background(), imageDetails.Repository, imageDetails.Tag)
	if err != nil {
		zap.S().Errorf("error getting image  %s digest %v", image, err)
		return
	}
	if result.Attributes != nil && result.Attributes.Digest != nil {
		digest = *result.Attributes.Digest
	}
	return
}
