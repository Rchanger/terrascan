/*
    Copyright (C) 2020 Accurics, Inc.

	Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

		http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

package vulnerability

import (
	"github.com/accurics/terrascan/pkg/iac-providers/output"
	"go.uber.org/zap"
)

var containerRegistry = make(map[string]Engine)

//RegisterContainerRegistry register the container registry for vulnerability scanning
func RegisterContainerRegistry(registry string, vulnerabilityEngine Engine) {
	containerRegistry[registry] = vulnerabilityEngine
}

//FindVulnerabilities find vulnerabilities for images found
func FindVulnerabilities(resourceConfigs output.AllResourceConfigs) output.AllResourceConfigs {
	for i, congigs := range resourceConfigs {
		for j, config := range congigs {
			for k, container := range config.ContainerImages {
				resourceConfigs[i][j].ContainerImages[k].Vulnerabilities =
					append(resourceConfigs[i][j].ContainerImages[k].Vulnerabilities,
						GetVulnerabilitiesByRepository(container)...)
			}
			for l, container := range config.InitContainerImages {
				resourceConfigs[i][j].InitContainerImages[l].Vulnerabilities =
					append(resourceConfigs[i][j].InitContainerImages[l].Vulnerabilities,
						GetVulnerabilitiesByRepository(container)...)
			}
		}
	}
	return resourceConfigs
}

//GetVulnerabilitiesByRepository get vulnerabilities depending on type of registry
func GetVulnerabilitiesByRepository(container output.ContainerNameAndImage) []output.Vulnerability {
	options := make(map[string]interface{})
	for _, registry := range containerRegistry {
		if registry.CheckRegistry(container.Image) {
			return registry.GetVulnerabilities(container, options)
		}
	}
	zap.S().Debugf("no registered container registry found for image %s", container.Image)
	return []output.Vulnerability{}
}
