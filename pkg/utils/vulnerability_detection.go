package utils

import (
	"context"

	"github.com/accurics/terrascan/pkg/iac-providers/output"
)

// GetVulnerabilitiesUsingTrivyCLI scans image using trivy as cli
func GetVulnerabilitiesUsingTrivyCLI(configs output.AllResourceConfigs) output.AllResourceConfigs {
	for i, v := range configs {
		for j, config := range v {
			for k, container := range config.ContainerImages {

				results, err := ScanDockerImageWithTrivyCLI(container.Image)
				if err != nil {
					continue
				}
				for _, result := range results {
					for _, vul := range result.Vulnerabilities {
						vulnerabilityConfig := output.VulnerabilityConfig{
							result.Target,
							result.Type,
							vul,
						}
						configs[i][j].ContainerImages[k].Vulnerabilities = append(configs[i][j].ContainerImages[k].Vulnerabilities, vulnerabilityConfig)

					}
				}
			}
			for l, container := range config.InitContainerImages {

				results, err := ScanDockerImageWithTrivyCLI(container.Image)
				if err != nil {
					continue
				}
				for _, result := range results {
					for _, vul := range result.Vulnerabilities {
						vulnerabilityConfig := output.VulnerabilityConfig{
							result.Target,
							result.Type,
							vul,
						}
						configs[i][j].InitContainerImages[l].Vulnerabilities = append(configs[i][j].InitContainerImages[l].Vulnerabilities, vulnerabilityConfig)

					}
				}
			}
		}

	}

	return configs
}

// GetVulnerabilitiesUsingTrivyServer scans image using trivy as server
func GetVulnerabilitiesUsingTrivyServer(configs output.AllResourceConfigs) output.AllResourceConfigs {
	results := output.Results{}
	var err error
	for i, v := range configs {
		for j, config := range v {
			for k, container := range config.ContainerImages {
				results, err = ScanDockerImageWithTrivyServer(context.Background(), container.Image)
				if err != nil {
					continue
				}
				for _, result := range results {
					for _, vul := range result.Vulnerabilities {
						vulnerabilityConfig := output.VulnerabilityConfig{
							result.Target,
							result.Type,
							vul,
						}
						configs[i][j].ContainerImages[k].Vulnerabilities = append(configs[i][j].ContainerImages[k].Vulnerabilities, vulnerabilityConfig)

					}
				}
			}
			for l, container := range config.InitContainerImages {
				results, err := ScanDockerImageWithTrivyServer(context.Background(), container.Image)
				if err != nil {
					continue
				}
				for _, result := range results {
					for _, vul := range result.Vulnerabilities {
						vulnerabilityConfig := output.VulnerabilityConfig{
							result.Target,
							result.Type,
							vul,
						}
						configs[i][j].InitContainerImages[l].Vulnerabilities = append(configs[i][j].InitContainerImages[l].Vulnerabilities, vulnerabilityConfig)

					}
				}
			}
		}
	}

	return configs
}
